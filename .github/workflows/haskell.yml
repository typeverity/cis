name: build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    container:
      image: haskell:9.6.3
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v3

      - uses: buildjet/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true # otherwise we would use the latest locally cached lts version, which might be older than upstream
          cache: npm
          cache-dependency-path: infra/package-lock.json

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: buildjet/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-${{ runner.arch }}-ghc-9.6.3
        with:
          path: ~/.cabal/store
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Initialize cabal
        run: cabal update

      - name: Install dependencies
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: buildjet/cache/save@v3
        # Caches are immutable, trying to save with the same key would error.
        if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
        with:
          path: ~/.cabal/store
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - run: cabal install cisserver --installdir=out

      - run: npm install
        working-directory: infra

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-north-1

      - run: npm run cdk deploy
        working-directory: infra
